#include <stdio.h>
#define true 1
#define false 0
//my answer
typedef int bool;

bool get_str_len(char* str) {//널문자포함 길이 구하기
    for (int i = 0; true; i++) {
        if (str[i] == '\0') {
            return i;
        }
    }
}

bool str_equals(char* str, char* keyword) {
    int len_of_str = get_str_len(str);//i=4
    int len_of_keyword = get_str_len(keyword);//i=4

    if (len_of_keyword != len_of_str) {//길이도 맞지않을시 false
        return false;
    }

    int start = len_of_str - len_of_keyword;//0
    int end = len_of_str;//4

    for (int i = start; i < end; i++) {
        if (str[i] != keyword[i]) {//같지않으면 false
            return false;
        }
    }

    return true;
}

int main(void) {
    char* str1 = "abc";
    char* str2 = "abc";
    char* str3 = "abcd";
    char* str4 = "bbc";
    char str5[] = "abc";

    printf("`%s` is equals to `%s` : %d\n", str1, str1, str_equals(str1, str1));
    // 출력 => `abc` is equals to `abc` : 1

    printf("`%s` is equals to `%s` : %d\n", str1, str2, str_equals(str1, str2));
    // 출력 => `abc` is equals to `abc` : 1

    printf("`%s` is equals to `%s` : %d\n", str1, str3, str_equals(str1, str3));
    // 출력 => `abc` is equals to `abcd` : 0

    printf("`%s` is equals to `%s` : %d\n", str1, str4, str_equals(str1, str4));
    // 출력 => `abc` is equals to `bbc` : 0

    printf("`%s` is equals to `%s` : %d\n", str1, str5, str_equals(str1, str5));
    // 출력 => `abc` is equals to `abc` : 1

    return 0;
}

//answer
#include <stdio.h>
#define true 1
#define false 0

typedef int bool;

bool get_str_len(char* str) {
  for (int i = 0; true; i++) {
    if (str[i] == '\0') {
      return i;
    }
  }
}

bool str_equals(char* str1, char* str2) {
  if (str1 == str2) {
    return true;
  }
  int len_of_str1 = get_str_len(str1);
  int len_of_str2 = get_str_len(str2);

  if (len_of_str1 != len_of_str2) {
    return false;
  }
  for (int i = 0; i < len_of_str1; i++) {
    if (str1[i] != str2[i]) {
      return false;
    }
  }
  return true;
}


int main(void) {
  char* str1 = "abc";
  char* str2 = "abc";
  char* str3 = "abcd";
  char* str4 = "bbc";
  char str5[] = "abc";

  printf("`%s` is equals to `%s` : %d\n", str1, str1, str_equals(str1, str1));
  // 출력 => `abc` is equals to `abc` : 1

  printf("`%s` is equals to `%s` : %d\n", str1, str2, str_equals(str1, str2));
  // 출력 => `abc` is equals to `abc` : 1

  printf("`%s` is equals to `%s` : %d\n", str1, str3, str_equals(str1, str3));
  // 출력 => `abc` is equals to `abcd` : 0

  printf("`%s` is equals to `%s` : %d\n", str1, str4, str_equals(str1, str4));
  // 출력 => `abc` is equals to `bbc` : 0

  printf("`%s` is equals to `%s` : %d\n", str1, str5, str_equals(str1, str5));
  // 출력 => `abc` is equals to `abc` : 1

  return 0;
}
//문제
#include <stdio.h>
#define true 1
#define false 0

typedef int bool;

bool str_part_equals(char* str1, int start, int end, char* str2) {
  int j = 0;
  for (int i = start; i < end; i++) {
    if (str1[i] != str2[j]) {
      return false;
    }
    j++;
  }
  return true;
}

int main(void) {
  printf("str_part_equals(\"abcd\", 0, 2, \"ab\") : %d\n", str_part_equals("abcd", 0, 2, "ab"));
  // 출력 => str_equals("abcd", 0, 2, "ab") : 1

  printf("str_part_equals(\"abcd\", 1, 2, \"b\") : %d\n", str_part_equals("abcd", 1, 2, "b"));
  // 출력 => str_equals("abcd", 1, 2, "b") : 1

  printf("str_part_equals(\"abcd\", 2, 2, \"\") : %d\n", str_part_equals("abcd", 2, 2, ""));
  // 출력 => str_equals("abcd", 2, 2, "") : 1

  printf("str_part_equals(\"abcd\", 2, 4, \"cb\") : %d\n", str_part_equals("abcd", 2, 4, "cb"));
  // 출력 => str_equals("abcd", 2, 4, "cb") : 0

  printf("str_part_equals(\"abcd\", 2, 4, \"cd\") : %d\n", str_part_equals("abcd", 2, 4, "cd"));
  // 출력 => str_equals("abcd", 2, 4, "cb") : 1

  return 0;
}


// 문제 : 문장에서 특정 문장의 위치를 반환하는 함수를 만들어주세요.(get_index_of_str)

#include <stdio.h>
typedef int bool;
#define true 1
#define false 0

int get_str_len(char* str) {
  for (int i = 0; true; i++) {
    if (str[i] == '\0') {
      return i;
    }
  }
}

bool starts_with(char* str, char* str2) {
  int str_len = get_str_len(str);
  int str2_len = get_str_len(str2);

  if (str_len < str2_len) {
    return false;
  }

  for (int i = 0; i < str2_len; i++) {
    if (str[i] != str2[i]) {
      return false;
    }
  }

  return true;
}


int get_index_of_str(char* str, char* keyword) {
  int str_len = get_str_len(str);
  int keyword_len = get_str_len(keyword);

  // 택도 없는 사항은 입구컷
  if (keyword_len > str_len) { return -1; }

  // 문장끼리 비교해야하는 횟수
  int compare_count = str_len - keyword_len + 1;

  for (int i = 0; i < compare_count; i++ ) {
    if (starts_with(str + i, keyword)) {
      return i;
    }
  }
  return -1;
}

int main(void) {
  int index;

  index = get_index_of_str("abc", "b");
  printf("index : %d\n", index);
  // 출력 => index : 1

  index = get_index_of_str("test", "es");
  printf("index : %d\n", index);
  // 출력 => index : 1

  index = get_index_of_str("abcd", "bd");
  printf("index : %d\n", index);
  // 출력 => index : -1

  return 0;
}