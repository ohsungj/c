<힙 영역>
프로그래머가 관리하는 메모리 공간.
- malloc : 힙에 메모리 공간 할당
- fee : 힙에 할당된 메모리 공간 해제

#include <stdlib.h>
void* malloc(size_t size);
void free(void* ptr);

-> malloc함수는 성공 시 할당된 메모리의 주소 값, 실패 시 null 반환

--
void* ptr1 = malloc(4); // 4바이트가 힙에 할당
void* ptr2 = malloc(12); // 12바이트 힐 할당

free(ptr1);
free(ptr2);
위에서 void* => 메모리가 어떤 타입의 데이터인지 몰라도되는 상황에서 사용됨.
좀더 쉽게 설명 => 일단 메모리를 할당을 한상태, 어떤 타입이든 나중에 쓸 수 있다.
-> 힙에 접근하는 방법은 주소값으로 포인터로 접근한다.
-> malloc 반환형이 void인 것은 우선 메모리 공간을 할당받는 것이 필요하기 때문

--
- malloc은 반환되는 주소값을 적절히 형 변환하는 게 필요
int* ptr1 = (int*)malloc(sizeof(int));
int* ptr2 = (int*)malloc(sizeof(int)*7);

- free는 malloc횟수만큼 호출해주기.



//문제1 - 공간도 만들고 값도 세팅해 주는 함수 구현
#include <stdio.h>
#include <stdlib.h>
#pragma warning (disable: 4996)

int* change() {
  int input;
  scanf("%d", &input);
  // malloc => 운영체에게 Heap 메모리 지역에서 공간을 할당해 달라고 부탁
  // malloc의 리턴값 => 우리가 할당받은 땅의 첫번째 주소
  int* arr = malloc(sizeof(int) * input);

  arr[0] = 100;
  arr[1] = 200;
  arr[2] = 300;
  return arr;
}

int main(void) {
  int* arr = change();
  printf("arr[0] : %d\n", arr[0]);
  printf("arr[1] : %d\n", arr[1]);
  printf("arr[2] : %d\n", arr[2]);

  // 절대로 arr을 반납처리하는게 아니다.
  // arr은 지역변수이기 때문에 자동반납처리가 된다.
  // free => malloc에 의해서 받은 땅을 반납처리한다.
  free(arr);
  return 0;
}



// 문제 : 몇명의 사람의 나이를 받을지 입력받고 입력받은 수 만큼 나이를 입력받은 후 저장해주세요.
// 조건 : malloc을 사용할 수 없습니다.
// 출력예시
/*
사람의 숫자를 입력해주세요. : 7[엔터]
3 이하로 입력해주세요.
사람의 숫자를 입력해주세요. : 4[엔터]
3 이하로 입력해주세요.
사람의 숫자를 입력해주세요. : 100[엔터]
3 이하로 입력해주세요.
사람의 숫자를 입력해주세요. : 2[엔터]
1번째 사람의 나이를 입력해주세요 : 33[엔터]
2번째 사람의 나이를 입력해주세요 : 50[엔터]
1번째 사람의 나이 : 33
2번째 사람의 나이 : 50
*/

#include <stdio.h>

#pragma warning (disable: 4996)

#define SIZE 3 //SIZE 상수.
#define true 1

int main(void) {
  int count_of_people;
  int ages[SIZE];

  while (true) {
    printf("사람의 숫자를 입력해주세요 : ");
    scanf("%d", &count_of_people);

    if (count_of_people <= SIZE) {
      break;
    }
    else {
      printf("%d 이하로 입력해주세요.\n", SIZE);
    }
  }
  for (int i = 0; i < count_of_people; i++) {
    printf("%d번째 사람의 나이를 입력해주세요 : ", i + 1);
    scanf("%d", ages + i);
    //scanf("%d", &ages[i]); 이렇게 해도 같다.
  }
  for (int i = 0; i < count_of_people; i++) {
    //printf("%d번째 사람의 나이 : %d", i + 1, *(ages + i));
    printf("%d번째 사람의 나이 : %d\n", i + 1, ages[i]);
  }
  return 0;
}